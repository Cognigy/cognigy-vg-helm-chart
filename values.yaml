###########
# General #
###########

global:
  ## Indication that is a Kubernetes deployment
  k8s: true
  ## Node environment
  nodeEnv:
  ## Default local host IP
  localhost: 127.0.0.1
  ## Collect stats variables
  ## Tracking call counts by entity level configuration
  track:
    accountCalls: true
    applicationCalls: true
    serviceProviderCalls: true

## Credentials for pulling image from private image registry.
## Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imageCredentials:
  registry: ""
  username: ""
  password: ""
  ## Alternatively specify an array of imagePullSecrets.
  ## Secrets must be manually created in the proper namespace beforehand.
  ## Example:
  ## pullSecrets:
  ##   - cognigyRegistrySecretName
  ##
  ## Note: When registry, username and password are set, the pullSecrets are ignored.
  pullSecrets: []

## We support the 3 major cloud providers: aws, azure, gcp
cloud: ""

aws: 
  ## Set to true, if using IMDSv2
  useIMDSv2: true
  grafana:
    storageClassName: "grafana"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"
  mysql:
    storageClassName: "mysql"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"

azure:
  useLoadBalancerIMDS: true
  grafana:
    storageClassName: "grafana"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"
  mysql:
    storageClassName: "mysql"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"

gcp:
  grafana:
    storageClassName: "grafana"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"
  mysql:
    storageClassName: "mysql"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"

stats:
    ## Metrics will be generate
    enabled: true
    ## Connection type
    protocol: tcp
    ## Metrics will be generated in Telegraf format
    telegraf: true
    sampleRate: true

#######
# TLS #
#######

## Traefik TLS certificate for the hostname defined at ingress.<service_name>.host
## NOTE: If you provide "tls.enable: true" and "traefik.enabled: true", either tls.crt and tls.key or tls.existingSecret must be provided.
tls:
  ## Enable traefik tls
  ## NOTE: If traefik is enabled ("traefik.enabled: true"), and you provide "tls.enable: false", then the auto redirection of http to https
  ## also must be disabled by setting traefik.ports.web.redirectTo: null
  enabled: true
  ## Add Custom CA certificate. A tls type secret named "cognigy-traefik" will be created based on the values of tls.crt and tls.key
  ## Careful with the indentation
  ## For more information, see https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  ##
  ## Custom CA certificate in plaintext, not base64 encoded.
  ## Example:
  ##   crt: |
  ##     -----BEGIN CERTIFICATE-----
  ##     -----END CERTIFICATE-----
  crt: ""
  ## CA certificate private key in plaintext, not base64 encoded.
  ## Example:
  ## key: |
  ##   -----BEGIN PRIVATE KEY-----
  ##   -----END PRIVATE KEY-----
  key: ""
  ## Existing secret with TLS certificates. The secret must have the following two keys:
  ## "tls.crt": Containing the CA certificate
  ## "tls.key": Containing the certificate key
  ## NOTE: When tls.existingSecret is set, clear text certificate passed in the previous parameters "tls.crt" and "tls.key" are ignored.
  existingSecret: ""


#############
# Analytics #
#############

cognigyInsights:
  # If enabled, analytics data will be collected and sent to the cognigy insights collector api
  enabled: false
  # API of service-collector
  apiUrl: ""
  apiKey: 
    secret: ""
    secretKey: ""

# Decoding of JWT Interaction Panels calls require the same secret as used in service-api for encoding
cognigyJwtSecret:
  secret: ""
  secretKey: ""
  
# API of service-endpoint to do the handshake to retrieve cognigy account information like organisationId
cognigyEndpoint:
  apiUrl: ""
###########
# Ingress #
###########

## If ingress is not required to deploy then you can set "ingress.enabled" to false.
## By default it is always enabled.
ingress:
  enabled: true
  api:
    host: ""
    ipWhiteListMiddleware: 
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  billingApp:
    host: ""
    ipWhiteListMiddleware: 
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  testCallManager:
    host: ""
    ipWhiteListMiddleware: 
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  webapp:
    host: ""
    ipWhiteListMiddleware: 
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0

#############
# SIP & RTP #
#############

## These values route which nodepool the SBC SIP and RTP pods will be placed in.
## The pods have to be in special nodepools that use host network binding due to the nature
## of sip signaling and the current lack of support for the SIP Protocol in Tngress Controllers.
##
## Note: If you want to put SIP and RTP into a single nodepool (e.g.: to save cost on a smaller deployment),
## then set both labels below to the same value and both tolerations below to the same value,
## and use those values when creating your single edge-facing nodepool when you spin up the cluster.
##
# Remark: For production deployments, separate nodepools are recommended for SIP and RTP.
sbc:
  sip:
    ## Tag for EIP group role, we have two at the moment:
    ## vg-dev-sip-node -> fleet-non-prod
    ## vg-prod-sip-node -> fleet-prod
    nodeSelector:
      label: voip-environment
      value: edge
    toleration: voip-edge
    serviceName: sbc-sip
    logLevel: info
    sofiaLoglevel: "3"
    ports:
      tcp: 5060
      tls: 5061
      udp: 5060
      wss: 8443
  rtp:
    nodeSelector:
      label: media-environment
      value: edge
    toleration: media-edge
    serviceName: sbc-rtp
    port: 22222
  ## EC2 Static EIP Allocator
  ec2EipAllocator:
    ## Only for AWS
    enabled: false
    image: cognigy.azurecr.io/ec2-eip-allocator:1.1.1
    ## Tag for the SIP EIP Node Pool
    sipEipGroupRole: ""
    ## Tag for the RTP EIP Node Pool
    rtpEipGroupRole: ""
    ## User to reallocate static EIPs
    vgOperatorUser: ""

#############
# Databases #
#############

dbCreate:
  hookEnabled: false
  hook: post-install,pre-upgrade

influxdb:
  image: influxdb:1.8.10-alpine
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  storage: 20Gi
  storageClassName: influxdb
  logLevel: info
  database:
    name: call_counts
  host: influxdb
  port: 8086

## Bitnami Chart, image info: bitnami/mysql:8.0.32-debian-11-r8
mysql:
  enabled: true
  fullnameOverride: mysql
  auth:
    createDatabase: true
    database: jambones
    username: jambones
    existingSecret: voicegateway-mysql-password
  primary:
    persistence:
      storageClass: "mysql"
      size: "10Gi"
  database:
    name: jambones
  host: mysql
  port: 3306

## Bitnami Chart, image info: bitnami/postgresql:14.7.0-debian-11-r1
## Used only internally by heplify-server and homer to store sip captures
postgresql:
  enabled: true
  fullnameOverride: postgres
  auth:
    postgresUsername: postgres
    postgresPassword: homer7Seven
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.7.0-debian-11-r1
    pullPolicy: IfNotPresent
  primary:
    persistence:
      storageClass: "postgres"
      size: "30Gi"
  host: postgres
  port: 5432

redis:
  image: redis:7.0.8-alpine3.17
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  host: redis
  port: 6379

##############
# Monitoring #
##############

grafana: 
  image: grafana/grafana:9.1.8
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  storageClassName: influxdb
  storage: 2Gi
  port: 3000

heplifyServer: 
  ## The "latest" tag is the only one available
  image: sipcapture/heplify-server:latest
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  serviceName: heplify-server
  ports:
    tcp: 9096
    udp: 9060

homer: 
  ## The "latest" tag is the only one available
  image: sipcapture/webapp:latest
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  serviceName: homer
  urlPrefixServiceConnection: http://
  ## Default credentials
  auth:
    username: admin
    password: sipcapture
  port: 80

jaeger: 
  image: jaegertracing/all-in-one:1.40.0
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  ports:
    tcp: 16686
    udp:
      compact: 6831
      collector: 6832

metrics:
  port: 8002  

telegraf: 
  image: telegraf:1.25.0-alpine
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  serviceName: telegraf
  port: 8125

## You can enable the pod monitor if any prometheus instance is running on your cluster.
podMonitors:
  enabled: false
  ## The namespace for the pod-monitor should be the same namespace where your prometheus instance is running
  namespace: "monitoring"

###########################
# VoiceGateway Components #
###########################

api:
  image: cognigy.azurecr.io/jambonz-api-server:release-daa4315cb40e78334bf496ed1ea58e02890cbf99-1677496380
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  logLevel: info
  port: 3000
  ## Prefix used to create some endpoint values [http | https]
  jwtAuth: true
  protocol: https
  resources:
    requests:
      cpu: "0.5"
      memory: 500Mi
    limits:
      cpu: "1"
      memory: 1Gi

apiBan:
  enabled: true
  image: cognigy.azurecr.io/api-ban:release-78312c781877cc87c761c23819ef3bc9cb3410f7-1676988340
  imagePullPolicy: IfNotPresent
  endpoint: https://apiban.org/api
  redisSetKey: apiban:ips
  refreshInterval: 3600
  apiKey:
    key: ""
    ## For existing API Key, the secret must have the following key:
    ## "apiKey": Containing API Key of API Ban
    ## NOTE: When apiKey.existingKey is set, the values in the previous parameter "apiKey.key" is ignored.
    existingKey: ""
  ## Add a list of known CIDRs to be banned, e.g.: "192.255.255.255/12, 168.255.255.255/24"
  bannedIpsList: ""
  cronjobSchedule: "0 * * * *"

billingApp:
  image: cognigy.azurecr.io/voicegateway-billing-app:release-6a2f090f3e0008bf4242d799ac297173f4fdec9b-1676988313
  imagePullPolicy: IfNotPresent
  replicasCount: 1
  port: 9000
  updateCallHistoryEndpoint: ""
  updateCallHistoryEndpointProtocol: "https"
  updateCallHistoryEndpointPath: "/api/v1/call-history/update"
  resources:
    requests:
      cpu: "0.5"
      memory: 500Mi
    limits:
      cpu: "1"
      memory: 1Gi

drachtio:
  image: cognigy.azurecr.io/drachtio-server:release-f8a4b35700072dc489fae1eaa3c1deac1f05b280-1677496377
  imagePullPolicy: IfNotPresent
  port: 9022
  homerId: 10
  resources:
    requests:
      cpu: "2"
      memory: 2Gi
    limits:
      cpu: "4"
      memory: 4Gi

featureServer:
  image: cognigy.azurecr.io/jambonz-feature-server:release-311fafa8a27b418fb740d29ac045a9869e6aa3f0-1679392647
  imagePullPolicy: Always
  replicaCount: 2
  logLevel: debug
  serviceName: feature-server
  ## Please set featureServer.useStatefulSet to true for azure cloud provider. This will deploy the feature-server as StatefulSet and without this 
  ## many functionality will not work as expected. 
  ## 
  ## Note: This is applicable for azure provider only.
  ## 
  useStatefulSet: false
  headlessServiceName: feature-server-headless
  freeswitchConnection: "127.0.0.1:8021:JambonzR0ck$"
  ports: 
    tcp: 3000
    udp: 5060
  resources:
    requests:
      cpu: "0.5"
      memory: 1Gi
    limits:
      cpu: "2"
      memory: 2Gi
  
freeswitch:
  image: cognigy.azurecr.io/docker-drachtio-freeswitch-mrf:release-7825660de429df0d2249718d1977e2634ee41615-1679339427
  imagePullPolicy: IfNotPresent
  logLevel: info
  ## Argument "--codec-answer-generous" is commented because we are looking into a DTMF recognition issue using Firefox, in the Interaction Panel Call,
  ## and until we don't have a solution we will force a specific codec for it. Once we have defintiive solution, we uncomment this.
  args:
    - freeswitch
    # - --codec-answer-generous
    - --username 
    - Cognigy
  port: 8081
  resources:
    requests:
      cpu: "1"
      memory: 1.5Gi
    limits:
      cpu: "2"
      memory: 3Gi

rtpEngine:
  image: cognigy.azurecr.io/docker-rtpengine:release-7ac14e3fac7f20eb0d50245df9d5cecfd9c33dc0-1678786255
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  logLevel: 5
  port: 22222
  homerId: 11
  resources:
    requests:
      cpu: "2"
      memory: 2Gi
    limits:
      cpu: "4"
      memory: 4Gi
  
rtpEngineSidecar:
  image: cognigy.azurecr.io/sbc-rtpengine-sidecar:release-a815f6de32601c7c026ac974e9f8c71e2d231249-1677496362
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  logLevel: info
  ports:
    dtmf: 22223
  resources:
    requests:
      cpu: "0.250"
      memory: 500Mi
    limits:
      cpu: "0.5"
      memory: 1Gi

sbcCallRouter:
  image: cognigy.azurecr.io/sbc-call-router:release-f1015cfd84e03e6db72129fa1b0705194aacd041-1677496359
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  logLevel: info
  port: 3000
  resources:
    requests:
      cpu: "0.5"
      memory: 200Mi
    limits:
      cpu: "1"
      memory: 400Mi

sbcInbound:
  image: cognigy.azurecr.io/sbc-inbound:release-93bc399034ad08998e6e9b276d40c884c8684e84-1677496373
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  logLevel: debug
  ## Enables Feature Server Signaling Transport as TCP, instead UDP (default)
  ##
  ## Note: This is an experimental feature. Please do not enable this in a production environment.
  ##
  featureServerSignalingTransportTcp: false
  ports: 
    tcp: 4000
    dtmf: 22224
  serviceName: sbc-inbound
  resources:
    requests:
      cpu: "1"
      memory: 1Gi
    limits:
      cpu: "2"
      memory: 2Gi

sbcOutbound:
  image: cognigy.azurecr.io/sbc-outbound:release-6282ed3c0d272bbc98cd2971b4ef0801616499ca-1677496370
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  logLevel: info
  ports: 
    tcp: 4000
    dtmf: 22225
  serviceName: sbc-outbound
  resources:
    requests:
      cpu: "1"
      memory: 1Gi
    limits:
      cpu: "2"
      memory: 2Gi

sbcSipSidecar:
  image: cognigy.azurecr.io/sbc-sip-sidecar:release-45e5e729993664bafac8218fed7a1bb8a96e8c2b-1677496348
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  logLevel: info
  resources:
    requests:
      cpu: "0.5"
      memory: 200Mi
    limits:
      cpu: "1"
      memory: 400Mi

testCallManager:
  enabled: false
  image: cognigy.azurecr.io/voicegateway-test-call-manager:release-7c2e8b7659d1e9b85560ebe034a3c1f4b46dc9cf-1676988305
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  port: 3000
  authEndpoint: ""
  authEndpointProtocol: "https"
  authEndpointPath: "/api/v1/call/auth"
  cleanUpEndpoint: ""
  cleanUpEndpointProtocol: "https"
  cleanUpEndpointPath: "/api/v1/call/clean-up"
  cleanUpThreshold:
    garbageCollection: 1800000 # 30 minutes
    recentCalls: 600000 # 10 minutes
  interactionPanelServiceProvider:
    id: ""
    apiKey: ""
    ## For existing service provider info, the secret must have the following two keys:
    ## "id": Containing the ID of the Service Provider
    ## "apiKey": Containing API Key of the above Service Provider
    ## NOTE: When interactionPanelServiceProvider.existingCredentials is set, the values in the previous parameters 
    ## "interactionPanelServiceProvider.id" and "interactionPanelServiceProvider.apiKey" are ignored.
    existingCredentials: ""
  resources:
    requests:
      cpu: "0.5"
      memory: 500Mi
    limits:
      cpu: "1"
      memory: 1Gi

webapp:
  image: cognigy.azurecr.io/vg-webapp:release-e2b98544836f975cef91813f23cbb32621524373-1677496598
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  port: 3001
  enableAccountLimits: true
  enableAllSpeechProviders: true
  resources:
    requests:
      cpu: "0.1"
      memory: 200Mi
    limits:
      cpu: "0.2"
      memory: 400Mi

###########
# Traefik #
###########

# The values below are used for Traefik Helm Chart
# For more information, see: https://github.com/traefik/traefik-helm-chart
traefik:
  enabled: true
  fullnameOverride: traefik
  image:
    name: cognigy.azurecr.io/traefik
    tag: "2.6.3"
    pullPolicy: IfNotPresent
  deployment:
    ## Specify imagePullSecrets to pull the image from private repository
    ## Based on the information provided in "imageCredentials" parameter previously, this should be either "cognigy-registry-token" or predefined secrets
    ## Note: Can be ignored if traefik is not enabled
    imagePullSecrets:
      - name: cognigy-registry-token
    replicas: 3
  logs:
    general:
      level: INFO
    access:
      enabled: true
      filters: {}
      fields:
        general:
          defaultmode: keep
          names: {}
        headers:
          defaultmode: drop
          names: {}
  ingressClass:
    enabled: true
    isDefaultClass: true
    fallbackApiVersion: ""
  globalArguments: []
  additionalArguments:
    - "--api.insecure=true"
    - "--entryPoints.web.forwardedHeaders.insecure"
    - "--entryPoints.websecure.forwardedHeaders.insecure"
    - "--entryPoints.web.proxyProtocol.insecure"
    - "--entryPoints.websecure.proxyProtocol.insecure"
  ports:
    traefik:
      port: 9000
      expose: false
      exposedPort: 9000
      protocol: TCP
    web:
      port: 8000
      expose: true
      exposedPort: 80
      protocol: TCP
      ## Note: If traefik is enabled, and tls not, then the auto redirection of http to https also must be disabled
      ## Do that by setting traefik.ports.web.redirectTo: null
      redirectTo: websecure
    websecure:
      port: 8443
      expose: true
      exposedPort: 443
      protocol: TCP
      tls:
        enabled: true
        options: ""
        certResolver: ""
        domains: []
    metrics:
      port: 9100
      expose: false
      exposedPort: 9100
      protocol: TCP
  service:
    enabled: true
    type: LoadBalancer
    annotations: {}
    annotationsTCP: {}
    annotationsUDP: {}
    labels: {}
    spec: {}
    loadBalancerSourceRanges: []
    externalIPs: []
  tlsOptions:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
## For the securityContext config of traefik, please refer to the official values.yaml file of the traefik
## This is the link for chart v10.19.4 for example
## https://github.com/traefik/traefik-helm-chart/blob/f24ac3c53579e0889b53a29f23a76d359ad54803/traefik/values.yaml#L490-L501
