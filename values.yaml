###########
# General #
###########

global:
  ## Indication that is a Kubernetes deployment
  k8s: true
  ## Node environment
  nodeEnv: ""
  ## Default local host IP
  localhost: 127.0.0.1
  ## Collect stats variables
  ## Tracking call counts by entity level configuration
  track:
    accountCalls: true
    applicationCalls: true
    serviceProviderCalls: true
  ## private network - IPs of the SBC (e.g. '172.31.0.0/16')
  privateVoipNetworkCidr: ""
  ## Global Docker image registry for Cognigy images
  ##
  imageRegistry: ""
  ## Global Log Level valid choices are debug, error, info, warn (sbc.sip: warning)
  logLevel: info
  enableTtsStreaming: true

###############
# Cognigy ENV #
###############

cognigyEnv:
  ## Enable Redis Sentinel Mode
  ## Note: Redis HA needs to be enabled to use Redis Sentinel Mode
  FEATURE_REDIS_SENTINEL_MODE_ENABLED: "false"
  ## Redis Sentinel Master Name
  REDIS_SENTINEL_MASTER_NAME: "mymaster"
  ## Redis Sentinel Host
  REDIS_SENTINEL_HOST: "redis-ha-headless"
  ## Redis Sentinel Port
  REDIS_SENTINEL_PORT: "26379"

  ## Transition to upstream package - this is required with v4.89
  JAMBONES_REDIS_SENTINEL_MASTER_NAME: "mymaster"
  ## Comma-seperated list of Redis Sentinels
  JAMBONES_REDIS_SENTINELS: "redis-ha-headless:26379"

## Credentials for pulling image from private image registry.
## Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imageCredentials:
  registry: ""
  username: ""
  password: ""
  ## Alternatively specify an array of imagePullSecrets.
  ## Secrets must be manually created in the proper namespace beforehand.
  ## Example:
  ## pullSecrets:
  ##   - cognigyRegistrySecretName
  ##
  ## Note: When registry, username and password are set, the pullSecrets are ignored.
  pullSecrets: []

## We support the 3 major cloud providers: aws, azure, gcp
cloud: ""

aws:
  ## Set to true, if using IMDSv2 - Instance Metadata Service Version 2
  useIMDSv2: true
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"
  mysql:
    storageClassName: "mysql"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "ebs.csi.aws.com"
    awsEBSVolumeType: "gp3"

azure:
  useLoadBalancerIMDS: true
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"
  mysql:
    storageClassName: "mysql"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "disk.csi.azure.com"
    azureStorageAccountType: "StandardSSD_LRS"

gcp:
  influxdb:
    storageClassName: "influxdb"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"
  mysql:
    storageClassName: "mysql"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"
  postgresql:
    storageClassName: "postgres"
    provisionerName: "pd.csi.storage.gke.io"
    pdType: "pd-balanced"

stats:
  ## Metrics will be generate
  enabled: true
  ## Connection type
  protocol: tcp
  ## Metrics will be generated in Telegraf format
  telegraf: true
  ## A value from 0 to 1; 1 = send all samples, 0.5 = send every 2nd sample, and so on.
  sampleRate: 1

#######
# TLS #
#######

## Traefik TLS certificate for the hostname defined at ingress.<service_name>.host
## NOTE: If you provide "tls.enable: true" and "traefik.enabled: true", either tls.crt and tls.key or tls.existingSecret must be provided.
tls:
  ## Enable traefik tls
  ## NOTE: If traefik is enabled ("traefik.enabled: true"), and you provide "tls.enable: false", then the auto redirection of http to https
  ## also must be disabled by setting traefik.ports.web.redirectTo.port: null
  enabled: true
  ## Add Custom CA certificate. A tls type secret named "cognigy-traefik" will be created based on the values of tls.crt and tls.key
  ## Careful with the indentation
  ## For more information, see https://helm.sh/docs/chart_template_guide/yaml_techniques/#strings-in-yaml
  ##
  ## Custom CA certificate in plaintext, not base64 encoded.
  ## Example:
  ##   crt: |
  ##     -----BEGIN CERTIFICATE-----
  ##     -----END CERTIFICATE-----
  crt: ""
  ## CA certificate private key in plaintext, not base64 encoded.
  ## Example:
  ## key: |
  ##   -----BEGIN PRIVATE KEY-----
  ##   -----END PRIVATE KEY-----
  key: ""
  ## Existing secret with TLS certificates. The secret must have the following two keys:
  ## "tls.crt": Containing the CA certificate
  ## "tls.key": Containing the certificate key
  ## NOTE: When tls.existingSecret is set, clear text certificate passed in the previous parameters "tls.crt" and "tls.key" are ignored.
  existingSecret: ""

# Decoding of JWT Interaction Panels calls require the same secret as used in service-api for encoding
# Supports multiple tokens, seperated by ';' secret1;secret2;
cognigyJwtSecrets:
  secret: ""
  secretKey: ""

###########
# Tracing #
###########

tracing:
  enabled: false
  errorsEnabled: false
  baseUrl: ""
  sampleRate: ""
  eventsSampleRate: ""
  environment: ""
  # enable call tracing with sentry
  callTracingEnabled: false
  apiBaseUrl: ""
  # sentry project e.g 'vg-dev'
  apiProject: ""
  secret: "vg-sentry-api-token"
  secretKey: token

###########
# Ingress #
###########

## If ingress is not required to deploy then you can set "ingress.enabled" to false.
## By default it is always enabled.
ingress:
  enabled: true
  ingressClassName: traefik

  api:
    host: ""
    extraAnnotations: {}
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  billingApp:
    host: ""
    extraAnnotations: {}
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  homer:
    enabled: false
    host: ""
    extraAnnotations: {}
    basicAuthMiddleware:
      enabled: true
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  jaeger:
    enabled: false
    host: ""
    extraAnnotations: {}
    basicAuthMiddleware:
      enabled: true
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  testCallManager:
    host: ""
    extraAnnotations: {}
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0
  webapp:
    host: ""
    extraAnnotations: {}
    ipWhiteListMiddleware:
      enabled: false
      ipWhiteList:
        sourceRange:
          - 0.0.0.0/0
        ipStrategy:
          depth: 0

#############
# SIP & RTP #
#############

## These values route which nodepool the SBC SIP and RTP pods will be placed in.
## The pods have to be in special nodepools that use host network binding due to the nature
## of sip signaling and the current lack of support for the SIP Protocol in Tngress Controllers.
##
## Note: If you want to put SIP and RTP into a single nodepool (e.g.: to save cost on a smaller deployment),
## then set both labels below to the same value and both tolerations below to the same value,
## and use those values when creating your single edge-facing nodepool when you spin up the cluster.
##
# Remark: For production deployments, separate nodepools are recommended for SIP and RTP.
sbc:
  sip:
    ## SAN Multi-Domain certificate or wildcard certificate
    ## Existing secret with TLS certificates. The secret must have the following two keys:
    ## "tls.crt": Containing the CA certificate
    ## "tls.key": Containing the certificate key
    certSecretName: cognigy-traefik
    ## The number of replicas for the RTP pods needs to be the same as the number of static IPs provisioned for the media traffic.
    replicaCount: 2
    ## Please set sbc.rtp.useStatefulSet to false if you don't want to use StatefulSet for SBC RTP (headless service).
    ## Setting it to false is not recommended because the media traffic is often not divided between the pods.
    useStatefulSet: true
    headlessServiceName: sbc-sip-headless
    serviceName: sbc-sip
    useAffinityOnDaemonSet: false
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - sbc-sip
            topologyKey: "kubernetes.io/hostname"
    nodeSelector:
      voip-environment: "edge"
    priorityClassName: ""
    podSecurityContext: {}
    tolerations:
      - key: "voip-edge"
        operator: "Exists"
        effect: "NoSchedule"
    ## sbc-sip drachtio log level
    ## valid choices are debug, info, notice, error, warning
    logLevel: info
    ## 0 - fatal errors, panic
    ## 1 - critical errors, minimal progress at subsystem level
    ## 2 - non-critical errors
    ## 3 - warnings, progress messages
    ## 5 - signaling protocol actions (incoming packets, ...)
    ## 7 - media protocol actions (incoming packets, ...)
    ## 9 - entering/exiting functions, very verbatim progress
    sofiaLoglevel: "3"
    ## if true, all available SBCs will send the REGISTER
    registerAllSbcs: false
    ports:
      tcp: 5060
      tls: 5061
      udp: 5060
      wss: 8443
  rtp:
    ## The number of replicas for the RTP pods needs to be the same as the number of static IPs provisioned for the media traffic.
    replicaCount: 2
    ## Please set sbc.rtp.useStatefulSet to false if you don't want to use StatefulSet for SBC RTP (headless service).
    ## Setting it to false is not recommended because the media traffic is often not divided between the pods.
    useStatefulSet: true
    headlessServiceName: sbc-rtp-headless
    serviceName: sbc-rtp
    useAffinityOnDaemonSet: false
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - sbc-rtp
            topologyKey: "kubernetes.io/hostname"
    nodeSelector:
      media-environment: "edge"
    priorityClassName: ""
    podSecurityContext: {}
    tolerations:
      - key: "media-edge"
        operator: "Exists"
        effect: "NoSchedule"
    port: 22222
  ## EC2 Static EIP Allocator
  ec2EipAllocator:
    ## Only for AWS
    enabled: false
    image: cognigy.azurecr.io/ec2-eip-allocator:1.1.2
    ## Tag key for the SIP EIP Node Pool
    sipEipGroupRoleKey: "role"
    ## Tag value for the SIP EIP Node Pool
    sipEipGroupRole: ""
    ## Tag key for the RTP EIP Node Pool
    rtpEipGroupRoleKey: "role"
    ## Tag value for the RTP EIP Node Pool
    rtpEipGroupRole: ""
    ## User to reallocate static EIPs
    vgOperatorUser: ""
  sipDnsUpdaterAzure:
    ## Only for Azure with private IPs for SIP/RTP Nodes
    enabled: false
    image: cognigy.azurecr.io/vg-sip-dns-updater-azure:1.0.0
    ## Service Principal (SP) with the permissions to update private DNS zone
    ## Provide credentials either via existingSecret or clear text.
    servicePrincipal:
      ## Azure Tenant ID
      tenantId: ""
      ## Application ID of the SP
      appId: ""
      ## Client secret of the SP
      appPassword: ""
      ## Existing secret with SP credentials
      existingSecret: ""
    ## Private DNS zone name
    dnsZoneName: ""
    ## Resource Group of the private DNS zone
    dnsZoneRg: ""
    ## TTL of the SIP DNS records
    dnsRecordTtl: "60"
    ## Base name for SIP DNS records
    dnsBaseName: "sbc-sip"

#############
# Databases #
#############

dbCreate:
  hookEnabled: false
  hook: post-install,pre-upgrade
  hookDeletePolicy: before-hook-creation,hook-succeeded,hook-failed
  image: cognigy.azurecr.io/db-create:4.95.0
  imagePullPolicy: Always
  logCollectorEnabled: false

influxdb:
  image: cognigy.azurecr.io/vg-influx:1.8.10-alpine
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  storage: 20Gi
  storageClassName: influxdb
  logLevel:
  database:
    name: call_counts
  host: influxdb
  port: 8086
  resources:
    requests:
      cpu: "0.500"
      memory: 750Mi
    limits:
      cpu: "1"
      memory: 1.5Gi

## Bitnami Chart, image info: bitnami/mysql:8.0.39-debian-12-r5
mysql:
  enabled: true
  global:
    imagePullSecrets:
      - cognigy-registry-token
    storageClass: mysql
  fullnameOverride: mysql
  auth:
    createDatabase: true
    database: jambones
    username: jambones
    existingSecret: voicegateway-mysql-password
  image:
    registry: cognigy.azurecr.io
    repository: mysql
    tag: 8.0.39-debian-12-r5
  primary:
    priorityClassName: ""
    persistence:
      size: "10Gi"
    resources:
      requests:
        cpu: "0.500"
        memory: 2Gi
      limits:
        cpu: "0.500"
        memory: 2Gi
  metrics:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: mysqld-exporter
      tag: 0.15.1-debian-12-r34
    resources:
      requests:
        cpu: "0.400"
        memory: 400Mi
      limits:
        cpu: "0.400"
        memory: 400Mi
    serviceMonitor:
      enabled: false
    args:
      # Use the username flag with just the username (no password)
      - --mysqld.username=jambones
      # Use the address flag with host:port
      - --mysqld.address=mysql:3306
    env:
      - name: MYSQLD_EXPORTER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: voicegateway-mysql-password
            key: mysql-password
  database:
    name: jambones
  host: mysql
  port: 3306

## Bitnami Chart, image info: bitnami/postgresql:14.12.0-debian-12-r15
## Used only internally by heplify-server and homer to store sip captures
postgresql:
  enabled: true
  replicaCount: 1
  global:
    imagePullSecrets:
      - cognigy-registry-token
    storageClass: postgres
  fullnameOverride: postgres
  auth:
    postgresUsername: postgres
    postgresPassword: homer7Seven
    database: homer_config
  image:
    registry: cognigy.azurecr.io
    repository: postgres
    tag: 14.12.0-debian-12-r15
  primary:
    priorityClassName: ""
    persistence:
      size: "30Gi"
    resources:
      requests:
        cpu: "1"
        memory: 4Gi
      limits:
        cpu: "1"
        memory: 4Gi
  metrics:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: postgres-exporter
      tag: 0.15.0-debian-12-r43
    resources:
      requests:
        cpu: "0.200"
        memory: 200Mi
      limits:
        cpu: "0.200"
        memory: 200Mi
    serviceMonitor:
      enabled: false
  host: postgres
  port: 5432

redis:
  image: cognigy.azurecr.io/redis:7.4.0-debian-12-r4
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  host: redis
  port: 6379
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []

###########################
# Redis High Availability #
###########################

redisHa:
  ## Enable Redis HA Deployment
  ## Note: This is only to enable Redis HA deployment, to enable Redis Sentinel usage,
  ## please also set the variables below on "cognigyEnv" section:
  ## "REDIS_SENTINEL_MASTER_NAME", "REDIS_SENTINEL_HOST", "REDIS_SENTINEL_PORT"
  enabled: false
  global:
    imagePullSecrets:
      - cognigy-registry-token
  fullnameOverride: "redis-ha"
  image:
    registry: cognigy.azurecr.io
    repository: redis
    tag: 7.4.0-debian-12-r4
  auth:
    enabled: false
    sentinel: false
  commonConfiguration: |-
    appendonly no
    protected-mode no
    repl-diskless-sync no
    save ""
    stop-writes-on-bgsave-error yes
    maxmemory-policy volatile-ttl
  replica:
    replicaCount: 3
    resources:
      requests:
        cpu: "0.150"
        memory: 600Mi
      limits:
        cpu: "0.150"
        memory: 600Mi
    priorityClassName: ""
    ## Set the maxmemory to the 85% of the redis memory limit.
    configuration: |-
      maxmemory 436mb
    podLabels:
      uniquezone: "redis-ha"
    affinity:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "uniquezone"
                  operator: In
                  values:
                    - "redis-ha"
            topologyKey: "topology.kubernetes.io/zone"
    persistence:
      enabled: false
  sentinel:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: redis-sentinel
      tag: 7.4.0-debian-12-r4
    automateClusterRecovery: true
    downAfterMilliseconds: 2000
    failoverTimeout: 10000
    resources:
      requests:
        cpu: 25m
        memory: 32Mi
      limits:
        cpu: 200m
        memory: 200Mi
  metrics:
    enabled: true
    image:
      registry: cognigy.azurecr.io
      repository: redis-exporter
      tag: 1.63.0-debian-12-r0
    resources:
      requests:
        cpu: 25m
        memory: 32Mi
      limits:
        cpu: 200m
        memory: 200Mi
    serviceMonitor:
      enabled: false

##############
# Monitoring #
##############

heplifyServer:
  ## We build and tag this image by ourselves
  image: cognigy.azurecr.io/vg-heplify-server:1.59.7-1
  imagePullPolicy: IfNotPresent
  ## It is not recommended to scale HEPlify-server horizontally since this might take additional load balancing or db queries
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  serviceName: heplify-server
  ## This param specifies the number of days after which all data in the database (except logs) will be deleted automatically.
  dbDropDays: 14
  ## This param sets the number of days after which call-related data will be deleted from the database.
  dbDropDaysCall: 14
  ## This param indicate the number of days after which registration-related data will be dropped from the database.
  dbDropDaysRegister: 1
  ## This param specifies the number of days after which any other data that is not related to the above categories will be dropped from the database.
  dbDropDaysDefault: 1
  extraEnvVars: []
  ports:
    tcp: 9096
    udp: 9060
  resources:
    requests:
      cpu: "0.05"
      memory: 400Mi
    limits:
      cpu: "0.100"
      memory: 800Mi

homer:
  ## We build and tag this image by ourselves
  image: cognigy.azurecr.io/vg-homer:1.5.3
  imagePullPolicy: IfNotPresent
  ## It is not recommended to scale HOMER horizontally since this might take additional load balancing or db queries
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  serviceName: homer
  urlPrefixServiceConnection: http://
  existingSecret: ""
  extraEnvVars: []
  ## Default credentials
  auth:
    username: admin
    password: sipcapture
  port: 80
  resources:
    requests:
      cpu: "0.05"
      memory: 50Mi
    limits:
      cpu: "0.100"
      memory: 150Mi

jaeger:
  image: cognigy.azurecr.io/vg-jaeger:1.61.0
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  serviceName: jaeger
  urlPrefixServiceConnection: http://
  username: "jaeger_admin"
  password: "jaeger_password"
  existingSecret: ""
  ports:
    tcp: 16686
    udp:
      compact: 6831
      collector: 6832
  resources:
    requests:
      cpu: "0.05"
      memory: 150Mi
    limits:
      cpu: "0.150"
      memory: 450Mi

metrics:
  port: 8002

health:
  port: 8001

telegraf:
  image: cognigy.azurecr.io/vg-telegraf:1.31-alpine
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  serviceName: telegraf
  port: 8125
  resources:
    requests:
      cpu: "0.05"
      memory: 100Mi
    limits:
      cpu: "0.100"
      memory: 250Mi

## You can enable the pod monitor if any prometheus instance is running on your cluster.
podMonitors:
  enabled: false
  ## The namespace for the pod-monitor should be the same namespace where your prometheus instance is running
  namespace: "monitoring"

#################
# Cognigy Login #
#################

cognigyLogin:
  enabled: false
  baseUrl: ""
  clientId: "voicegateway"
  secret: "vg-cognigy-login"
  secretKey: "clientSecret"

###########################
# VoiceGateway Components #
###########################

jobs:
  image: cognigy.azurecr.io/vg-alpine-curl:3.20

api:
  image: cognigy.azurecr.io/api-server:4.95.0
  imagePullPolicy: Always
  replicaCount: 2
  ## valid choices are debug, info, error, warn
  logLevel:
  port: 3000
  serviceName: api-server
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - api-server
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  ## Prefix used to create some endpoint values [http | https]
  jwtAuth: true
  enableDebounceMiddleware: true
  debounceTimeInSeconds: 5
  debounceQuantity: 50
  disableRateLimit: true
  rateLimitMinutes: 4
  rateLimit: 1000
  enablePrepareCognigyData: true
  protocol: https
  extraEnvVars: []
  resources:
    requests:
      cpu: "0.250"
      memory: 250Mi
    limits:
      cpu: "0.500"
      memory: 500Mi

apiBan:
  enabled: true
  image: cognigy.azurecr.io/api-ban:1.1.0
  imagePullPolicy: IfNotPresent
  endpoint: https://apiban.org/api
  redisSetKey: apiban:ips
  refreshInterval: 3600
  cronjobTtlSecondsAfterFinished: 180
  apiKey:
    key: ""
    ## For existing API Key, the secret must have the following key:
    ## "apiKey": Containing API Key of API Ban
    ## NOTE: When apiKey.existingKey is set, the values in the previous parameter "apiKey.key" is ignored.
    existingKey: ""
  ## Add a list of known CIDRs to be banned, e.g.: "192.255.255.255/12, 168.255.255.255/24"
  bannedIpsList: ""
  cronjobSchedule: "0 * * * *"
  extraEnvVars: []

billingApp:
  enabled: false
  image: cognigy.azurecr.io/voicegateway-billing-app:4.95.0
  imagePullPolicy: IfNotPresent
  replicasCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  port: 9000
  endpoint: ""
  endpointProtocol: "https"
  updateCallHistoryEndpointPath: "/api/v1/call-history/update"
  deactivateAccountEndpointPath: "/api/v1/account/deactivate"
  callHistoryTtlSecondsAfterFinished: 180
  deactivateTtlSecondsAfterFinished: 180
  billingAppUserCreds:
    user: ""
    password: ""
    ## For existing user info, the secret must have the following two keys:
    ## "user": Containing the username to log into api-server
    ## "password": Containing password of the above username
    ## NOTE: When billingApp.existingCredentials is set, the values in the previous parameters
    ## "billingApp.user" and "billingApp.password" are ignored.
    existingCredentials: ""
  extraEnvVars: []
  resources:
    requests:
      cpu: "0.100"
      memory: 150Mi
    limits:
      cpu: "0.200"
      memory: 300Mi

drachtio:
  image: cognigy.azurecr.io/vg-drachtio-server:0.8.27-rc17
  imagePullPolicy: IfNotPresent
  port: 9022
  metricsPort: 8088
  homerId: 10
  supportBestEffortTls: false
  rejectRegisterWithNoRealm: true
  ## if true - do not advertise public IPs
  privateIpOnly: false
  extraEnvVars: []
  ## feature-server drachtio log level
  ## valid choices are debug, info, notice, error, warning
  logLevel:
  resources:
    requests:
      cpu: "0.5"
      memory: 500Mi
    limits:
      cpu: "0.5"
      memory: 500Mi

featureServer:
  image: cognigy.azurecr.io/vg-feature-server:4.95.0
  imagePullPolicy: Always
  replicaCount: 2
  ## valid choices are debug, info, error, warn
  logLevel:
  ## 0 - fatal errors, panic
  ## 1 - critical errors, minimal progress at subsystem level
  ## 2 - non-critical errors
  ## 3 - warnings, progress messages
  ## 5 - signaling protocol actions (incoming packets, ...)
  ## 7 - media protocol actions (incoming packets, ...)
  ## 9 - entering/exiting functions, very verbatim progress
  sofiaLoglevel: "3"
  ## Microsoft only - Trims trailing silence (zero-amplitude samples) from the end of an audio file
  trimTts: true
  serviceName: feature-server
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - feature-server
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  sigtermForceCloseTimeoutMs: ""
  terminationGracePeriodSeconds: 900
  ## Please set featureServer.useStatefulSet to false if you don't want to use StatefulSet for Feature Server (headless service)
  ## Setting it to false is not recommended and does not work if Azure cloud.
  useStatefulSet: true
  headlessServiceName: feature-server-headless
  freeswitchConnection: "127.0.0.1:8021:JambonzR0ck$"
  # Sets the max memory size of V8's old memory section - size in Megabytes
  nodeOptions: "--max-old-space-size=450"
  # Pre cache audio
  preCacheAudio: true
  anchorMediaAlways: false
  ## Disable the 'P-Asserted-Identity' header
  disableDialPaiHeader: false
  extraEnvVars: []
  ports:
    tcp: 3000
    udp: 5060
  resources:
    requests:
      cpu: "1"
      memory: 500Mi
    limits:
      cpu: "1"
      memory: 500Mi

freeswitch:
  image: cognigy.azurecr.io/vg-freeswitch-mrf:0.9.3
  imagePullPolicy: IfNotPresent
  ## valid choices are debug, info, error, warn
  logLevel:
  username: Cognigy
  ports:
    sip: 5080
    tls: 5081
    eventSocket: 8021
  ## Argument "--codec-answer-generous" is commented because we are looking into a DTMF recognition issue using Firefox, in the Interaction Panel Call,
  ## and until we don't have a solution we will force a specific codec for it. Once we have defintive solution, we uncomment this.
  args:
    # - --codec-answer-generous
    # - --g711-only OR
    # - --g711-only-alaw-preferred (this is recommended for clusters running in EU)
    # - --rtp-range-start the starting UDP port for RTP traffic
    # - --rtp-range-end the ending UDP port for RTP traffic
    # - --log-level debug (available from R71 freeSWITCH-mrf image)
  tmpCacheAudioFolder: "/tmp/"
  serviceThreads: 1
  bufferSecs: 5
  deepgramSttUseSingleConnection: true
  azureSttUseSingleConnection: false
  ## it is recommended to force HTTP/1 for streaming since there might be some issues with HTTP/2
  disableHttp2ForTtsStreaming: true
  extraEnvVars: []
  resources:
    requests:
      cpu: "2.5"
      memory: 3Gi
    limits:
      cpu: "2.5"
      memory: 3Gi

rtpEngine:
  image: cognigy.azurecr.io/vg-rtpengine:11.5.1.24
  imagePullPolicy: IfNotPresent
  # During runtime, the log level can be decreased by sending the signal SIGURS1 to the daemon and can be increased with the signal SIGUSR2
  logLevel: 3
  port: 22222
  startPort: 40000
  endPort: 60000
  homerId: 11
  extraEnvVars: []
  resources:
    requests:
      cpu: "3"
      memory: 1Gi
    limits:
      cpu: "3"
      memory: 1Gi

rtpEngineSidecar:
  image: cognigy.azurecr.io/sbc-rtpengine-sidecar:4.95.0
  imagePullPolicy: IfNotPresent
  ## valid choices are debug, info, error, warn
  logLevel:
  extraEnvVars: []
  ports:
    dtmf: 22223
  resources:
    requests:
      cpu: "0.100"
      memory: 200Mi
    limits:
      cpu: "0.100"
      memory: 200Mi

sbcCallRouter:
  image: cognigy.azurecr.io/sbc-call-router:4.95.0
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  ## valid choices are debug, info, error, warn
  logLevel:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - sbc-call-router
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  extraEnvVars: []
  port: 3000
  resources:
    requests:
      cpu: "0.100"
      memory: 150Mi
    limits:
      cpu: "0.100"
      memory: 150Mi

sbcInbound:
  image: cognigy.azurecr.io/sbc-inbound:4.95.0
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - sbc-inbound
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  ## valid choices are debug, info, error, warn
  logLevel:
  terminationGracePeriodSeconds: 900
  ## Enables Feature Server Signaling Transport as TCP, instead UDP (default)
  ##
  ## Note: This is an experimental feature. Please do not enable this in a production environment.
  ##
  featureServerSignalingTransportTcp: false
  extraEnvVars: []
  ports:
    tcp: 4000
    dtmf: 22224
  serviceName: sbc-inbound
  resources:
    requests:
      cpu: "0.200"
      memory: 250Mi
    limits:
      cpu: "0.200"
      memory: 250Mi

sbcOutbound:
  image: cognigy.azurecr.io/sbc-outbound:4.95.0
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - sbc-outbound
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  ## valid choices are debug, info, error, warn
  logLevel:
  terminationGracePeriodSeconds: 900
  extraEnvVars: []
  ports:
    tcp: 4000
    dtmf: 22225
  serviceName: sbc-outbound
  resources:
    requests:
      cpu: "0.150"
      memory: 150Mi
    limits:
      cpu: "0.150"
      memory: 150Mi
  padCrypto: false
  supportBestEffortTls: false
  registerRfc3261: false

sbcSipSidecar:
  image: cognigy.azurecr.io/sbc-sip-sidecar:4.95.0
  imagePullPolicy: IfNotPresent
  ## valid choices are debug, info, error, warn
  logLevel:
  registerRfc3261: false
  extraEnvVars: []
  resources:
    requests:
      cpu: "0.100"
      memory: 150Mi
    limits:
      cpu: "0.100"
      memory: 150Mi

testCallManager:
  enabled: false
  image: cognigy.azurecr.io/vg-test-call-manager:4.89.0
  imagePullPolicy: IfNotPresent
  replicaCount: 1
  affinity: {}
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  port: 3000
  authEndpoint: ""
  authEndpointProtocol: "https"
  authEndpointPath: "/api/v1/call/auth"
  cronjobTtlSecondsAfterFinished: 180
  cleanUpEndpoint: ""
  cleanUpEndpointProtocol: "https"
  cleanUpEndpointPath: "/api/v1/call/clean-up"
  cleanUpThreshold:
    garbageCollection: 1800000 # 30 minutes
    recentCalls: 600000 # 10 minutes
  interactionPanelServiceProvider:
    id: ""
    apiKey: ""
    ## For existing service provider info, the secret must have the following two keys:
    ## "id": Containing the ID of the Service Provider
    ## "apiKey": Containing API Key of the above Service Provider
    ## NOTE: When interactionPanelServiceProvider.existingCredentials is set, the values in the previous parameters
    ## "interactionPanelServiceProvider.id" and "interactionPanelServiceProvider.apiKey" are ignored.
    existingCredentials: ""
  extraEnvVars: []
  resources:
    requests:
      cpu: "0.100"
      memory: 200Mi
    limits:
      cpu: "0.200"
      memory: 400Mi

webapp:
  image: cognigy.azurecr.io/vg-webapp:4.95.0
  imagePullPolicy: IfNotPresent
  replicaCount: 2
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app
                  operator: In
                  values:
                    - webapp
            topologyKey: kubernetes.io/hostname
  nodeSelector: {}
  priorityClassName: ""
  podSecurityContext: {}
  tolerations: []
  port: 3001
  cognigyUrl: ""
  disableCallRecording: false
  disableCustomSpeech: false
  disableDefaultTrunkRouting: false
  disableTracing: false
  disableLcr: false
  disableSipClient: false
  disableSpLimits: false
  enableAccountLimits: true
  enableAllSpeechProviders: false
  enableCognigyLogin: false
  enableForgotPassword: false
  enableMsTeamsRouting: false
  enableSms: false
  enableTtsElevenlabs: true
  enableTtsElevenlabsOptions: false
  enableDeepgram: true
  enableOnPremisesAzureSpeech: true
  enableOnPremisesDeepgram: true
  enableOnPremisesNuance: true
  enablePingOptions: false
  extraEnvVars: []
  resources:
    requests:
      cpu: "0.1"
      memory: 200Mi
    limits:
      cpu: "0.2"
      memory: 400Mi

###########
# Traefik #
###########

# The values below are used for Traefik Helm Chart
# For more information, see: https://github.com/traefik/traefik-helm-chart
traefik:
  enabled: true
  instanceLabelOverride: "voicegateway"
  fullnameOverride: traefik
  image:
    registry: cognigy.azurecr.io
    repository: traefik
    tag: "3.1.6"
    pullPolicy: IfNotPresent
  deployment:
    ## Specify imagePullSecrets to pull the image from private repository
    ## Based on the information provided in "imageCredentials" parameter previously, this should be either "cognigy-registry-token" or predefined secrets
    ## Note: Can be ignored if traefik is not enabled
    imagePullSecrets:
      - name: cognigy-registry-token
    replicas: 3
    podLabels:
      uniquezone: "set"
  logs:
    general:
      level: INFO
    access:
      enabled: true
      filters: {}
      fields:
        general:
          defaultmode: keep
          names: {}
        headers:
          defaultmode: drop
          names: {}
  ingressClass:
    enabled: true
    isDefaultClass: true
  ingressRoute:
    dashboard:
      enabled: false
  globalArguments:
    - "--api.insecure=true"
  additionalArguments: []
  ports:
    traefik:
      port: 9000
      expose:
        default: false
        internal: false
      exposedPort: 9000
      protocol: TCP
    web:
      port: 8000
      expose:
        default: true
      exposedPort: 80
      protocol: TCP
      ## Note: If traefik is enabled, and tls not, then the auto redirection of http to https also must be disabled
      ## Do that by setting traefik.ports.web.redirectTo.port: null
      redirectTo:
        port: websecure
      # Trust forwarded headers information (X-Forwarded-*).
      forwardedHeaders:
        trustedIPs: []
        insecure: true
      # Enable the Proxy Protocol header parsing for the entry point
      proxyProtocol:
        trustedIPs: []
        insecure: true
    websecure:
      port: 8443
      expose:
        default: true
      exposedPort: 443
      protocol: TCP
      # Trust forwarded  headers information (X-Forwarded-*).
      forwardedHeaders:
        trustedIPs: []
        insecure: true
      # Enable the Proxy Protocol header parsing for the entry point
      proxyProtocol:
        trustedIPs: []
        insecure: true
      tls:
        enabled: true
        options: ""
        certResolver: ""
        domains: []
    metrics:
      port: 9100
      expose:
        default: false
        internal: true
      exposedPort: 9100
      protocol: TCP
  service:
    enabled: true
    type: LoadBalancer
    annotations: {}
    annotationsTCP: {}
    annotationsUDP: {}
    labels: {}
    spec: {}
    loadBalancerSourceRanges: []
    externalIPs: []
  resources:
    limits:
      cpu: 400m
      memory: 500Mi
    requests:
      cpu: 200m
      memory: 250Mi
  tlsOptions:
    default:
      minVersion: VersionTLS12
      cipherSuites:
        - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
        - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
        - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: "uniquezone"
                operator: In
                values:
                  - "set"
          topologyKey: "topology.kubernetes.io/zone"

  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0

## Optionally create priorityClass
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/pod-priority-preemption/#priorityclass
##
priorityClass:
  enabled: true
  critical:
    enabled: true
    name: critical
    value: 4000000
    preemptionPolicy: PreemptLowerPriority
    globalDefault: false
    description: "PriorityClass for critical priority services"
  high:
    enabled: true
    name: high
    value: 3000000
    preemptionPolicy: PreemptLowerPriority
    globalDefault: false
    description: "PriorityClass for high priority services"
  medium:
    enabled: true
    name: medium
    value: 2000000
    preemptionPolicy: PreemptLowerPriority
    globalDefault: false
    description: "PriorityClass for medium priority services"
  low:
    enabled: true
    name: low
    value: 1000000
    preemptionPolicy: Never
    globalDefault: false
    description: "PriorityClass for low priority services"

## Optionally enable HorizontalPodAutoscaler for pods
## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
##
## Make sure that pods have resources limits and requests defined and the 'metrics server' has been deployed and configured in the cluster.
## https://github.com/kubernetes-sigs/metrics-server
##
## Note: This is an experimental feature and should not be used in production.
## Please don't enable this flag for now if you are a customer running Cognigy Voice Gateway using this Helm Chart.
## This note will be removed once we are done with the testing and the feature will be production ready.
##
hpa:
  enabled: false
  ## When set to true, and "hpa.enabled" is true, the "spec.replicas" field will be omitted from the deployment manifest of all the HPA managed services.
  ##
  removeReplicas: true
  ## Enabling this flag would append the tolerations defined in "hpa.hpaTolerations" to the deployment manifest of all the HPA managed services.
  ##
  useHpaTolerations: true
  ## default tolerations to be added to the deployment manifest of all the HPA managed services.
  ##
  hpaTolerations:
    - key: "node-role.cognigy.ai"
      value: "autoscaler"
      effect: "NoSchedule"
  ## Enabling this flag would append the nodeSelector defined in "hpa.hpaNodeSelector" to the deployment manifest of all the HPA managed services.
  ##
  useHpaNodeSelector: true
  ## default nodeSelector to be added to the deployment manifest of all the HPA managed services.
  ##
  hpaNodeSelector:
    "node-role": "autoscaler"
  ## HorizontalPodAutoscaler (HPA) managed services
  ##
  services:
    featureServer:
      ## Enable horizontal pod autoscaler
      ##
      enabled: true
      name: feature-server
      ## Define the specification of the workload this HAP will manage.
      ## Examples:
      ## If the HPA will manage a Deployment then set the following
      ##  scaleTargetRef:
      ##    apiVersion: apps/v1
      ##    kind: Deployment
      ##
      ## Alternatively if the HPA will manage a StatefulSet then set the following
      ##  scaleTargetRef:
      ##    apiVersion: apps/v1
      ##    kind: StatefulSet
      ##
      scaleTargetRef:
        apiVersion: apps/v1
        kind: StatefulSet
      ## Minimum allowed replicas to which the scaling target can be scaled down
      ##
      minReplicas: 2
      ## Maximum allowed replicas to which the scaling target can be scaled up
      ##
      maxReplicas: 10
      ## Define metrics against which HorizontalPodAutoscaler will react
      ## metrics:
      ##   - type: Resource
      ##     resource:
      ##       name: memory
      ##       target:
      ##         type: Utilization
      ##         averageUtilization: 80
      ##   - type: Resource
      ##     resource:
      ##       name: cpu
      ##       target:
      ##         type: Utilization
      ##         averageUtilization: 70
      ##
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              ## Define the CPU target to trigger the scaling actions (utilization percentage)
              ##
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              ## Define the memory target to trigger the scaling actions (utilization percentage)
              ##
              averageUtilization: 70
      behavior: {}
    api:
      enabled: true
      name: api-server
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
      minReplicas: 2
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior: {}
    sbcInbound:
      enabled: true
      name: sbc-inbound
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
      minReplicas: 2
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior: {}
    sbcOutbound:
      enabled: true
      name: sbc-outbound
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
      minReplicas: 2
      maxReplicas: 10
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 50
        - type: Resource
          resource:
            name: memory
            target:
              type: Utilization
              averageUtilization: 70
      behavior: {}

###########
# VMD #
###########

phraseList: |
  {
    "en-US": [
      "call has been forwarded",
      "at the beep",
      "at the tone",
      "leave a message",
      "leave me a message",
      "not available",
      "can't take your call",
      "will get back to you",
      "I'll get back to you",
      "we are unable",
      "Unable to take your call now",
      "I'll reply soon",
      "I'll call back",
      "I'll reach out to you as soon as possible",
      "Leave a message",
      "Away from phone",
      "Not available now",
      "I'll return call",
      "On another call",
      "Currently on another call",
      "I will return call later",
      "Busy please leave message",
      "Message will be returned promptly",
      "Currently unavailable to answer",
      "Planning to return your call soon",
      "Apologies for missing your call",
      "Not by the phone at the moment",
      "Expecting to return your call",
      "Currently not accessible",
      "Intend to call back",
      "Appreciate your patience!",
      "Engaged in another conversation",
      "I Will respond promptly",
      "Kindly leave a message",
      "Currently occupied leave a message",
      "Unfortunately unable to answer right now",
      "Occupied at the moment",
      "Not present leave a message",
      "Regrettably unavailable kindly leave a message",
      "Will ensure a prompt response to your message",
      "Currently engaged",
      "Will return your call at the earliest opportunity",
      "Your message will receive my prompt attention",
      "I'll respond as soon as I can",
      "Your message is important please leave it after the beep",
      "Away from the phone at the moment",
      "Unable to answer right now",
      "Engaged in another task",
      "Not by the phone presently",
      "I'll respond at my earliest convenience",
      "Away from the phone momentarily",
      "I'll return your call shortly",
      "Currently not able to answer",
      "Your message is important please leave it after the tone",
      "I'm unable to take your call right now",
      "Please leave your message for me",
      "I'll get back to you soon",
      "Your call has been missed",
      "Please leave a detailed message for me to respond to",
      "Leave a message I'll make sure to respond",
      "Feel free to leave a message",
      "Your call is important to me",
      "I'll get back to you shortly",
      "Your message will be attended to promptly",
      "Not available at the moment",
      "I'll be sure to get back to you",
      "I'll call you back soon",
      "I'll ensure a prompt response",
      "Sorry for the inconvenience",
      "I'll return your call",
      "I'll make sure to get back to you",
      "I'll call you back shortly",
      "I'll return your call as soon as possible",
      "Apologies for the inconvenience leave your message",
      "Your call is appreciated",
      "I'm unavailable to answer",
      "I'm currently away",
      "I'll return your call as soon as I can",
      "I'm away from the phone",
      "I'm currently unavailable to take your call",
      "Sorry for missing your call",
      "I'll ensure it receives my immediate attention",
      "I'm away from the phone momentarily",
      "I'll reach out to you shortly",
      "Apologies for the inconvenience",
      "Currently occupied",
      "Unable to answer your call at the moment",
      "I'll make sure to follow up with you",
      "Sorry for not being available",
      "I'll reach out to you as soon as I can",
      "I'm currently engaged",
      "I'm currently busy",
      "I'm currently unavailable",
      "I'll respond to you at my earliest convenience",
      "Your message is appreciated",
      "I'll get back to you promptly",
      "I'll get back to you without delay",
      "Currently away from the phone",
      "I'll return your call at my earliest opportunity",
      "Sorry for the missed call",
      "I'll make sure to address your concerns",
      "Please provide your details for a callback",
      "I'll make every effort to respond promptly",
      "I'll ensure it's attended to promptly",
      "Away from the phone temporarily",
      "I'll get back to you as soon as I return",
      "Currently not in a position to answer your call",
      "Your call cannot be answered at the moment",
      "I'll ensure to respond as soon as I'm able",
      "Your call is important please leave a message",
      "Unable to answer right now please leave your message",
      "Currently not accessible intending to return your call",
      "I'll respond promptly to your message",
      "leave a memo",
      "please leave a memo"
    ],
    "de-DE": [
      "nicht erreichbar",
      "derzeit nicht erreichbar",
      "im Moment nicht erreichbar",
      "anruf wurde weitergeleitet",
      "anruf weitergeleitet",
      "beim piepsen",
      "beim piepton",
      "nach dem ton",
      "am ton",
      "nach dem signal",
      "eine nachricht hinterlassen",
      "hinterlasse mir eine Nachricht",
      "hinterlassen Sie eine Nachricht",
      "sprechen Sie nach dem Ton",
      "nicht verfügbar",
      "zurzeit nicht verfügbar",
      "kann ihren anruf nicht entgegennehmen",
      "kann Ihren Anruf leider nicht persönlich entgegennehmen",
      "wird sich bei Ihnen melden",
      "ruft Sie zurück",
      "ich melde mich bei dir",
      "melde mich später",
      "wir können nicht",
      "wir können Ihren Anruf leider nicht entgegennehmen",
      "Mobilbox",
      "Mailbox",
      "mobilbox",
      "mailbox",
      "Anrufbeantworter",
      "Combox"
    ],
    "es-ES": [
      "le pasamos la llamada",
      "después del bip",
      "después del tono",
      "deja un mensaje",
      "déjame un mensaje",
      "no estamos disponibles",
      "no estoy disponible",
      "ahora no puedo",
      "no puedo contestar",
      "no le puedo contestar",
      "me pondré en contacto",
      "nos pondremos en contacto",
      "ahora no estamos disponibles",
      "no estamos disponibles"
    ],
    "ca-ES": [
      "passem la seva trucada",
      "després del bip",
      "després del to",
      "deixi un missatge",
      "deixa un missatge",
      "deixim un missatge",
      "no estem disponibles",
      "no estem a l'oficina",
      "no estic disponible",
      "ara no puc",
      "no puc contestar",
      "no puc respondre",
      "no li puc respondre",
      "em posaré en contacte",
      "ens posarem en contacto",
      "ara no estem disponibles",
      "no hi som"
    ]
  }
