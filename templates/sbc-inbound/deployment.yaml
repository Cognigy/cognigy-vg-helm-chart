apiVersion: apps/v1
kind: Deployment
metadata:
  name: sbc-inbound
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    app: sbc-inbound
spec:
  selector:
    matchLabels:
      app: sbc-inbound
  {{- if not (and ($.Values.hpa.enabled) ($.Values.hpa.removeReplicas)) }}
  replicas: {{ .Values.sbcInbound.replicaCount }}
  {{- end }}
  template:
    metadata:
      labels:
        app: sbc-inbound
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
    spec:
      {{- include "image.pullSecrets" $ | nindent 6 }}
      {{- if .Values.sbcInbound.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.sbcInbound.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.sbcInbound.affinity }}
      affinity: {{- include "vg.common.tplvalues.render" (dict "value" .Values.sbcInbound.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.Values.sbcInbound.nodeSelector) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector))}}
      nodeSelector:
        {{- if .Values.sbcInbound.nodeSelector }}
          {{- include "vg.common.tplvalues.render" (dict "value" .Values.sbcInbound.nodeSelector "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector) }}
          {{- include "vg.common.tplvalues.render" (dict "value" $.Values.hpa.hpaNodeSelector "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.sbcInbound.priorityClassName }}
      priorityClassName: {{ .Values.sbcInbound.priorityClassName }}
      {{- end }}
      {{- if .Values.sbcInbound.podSecurityContext }}
      securityContext: {{- include "vg.common.tplvalues.render" (dict "value" .Values.sbcInbound.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.Values.sbcInbound.tolerations) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations))}}
      tolerations: 
        {{- if or (.Values.sbcInbound.tolerations) }}
          {{- include "vg.common.tplvalues.render" (dict "value" .Values.sbcInbound.tolerations "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations) }}
          {{- include "vg.common.tplvalues.render" (dict "value" $.Values.hpa.hpaTolerations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: sbc-inbound
          image: {{ .Values.sbcInbound.image }}
          imagePullPolicy: {{ .Values.sbcInbound.imagePullPolicy }}
          resources: {{- toYaml .Values.sbcInbound.resources | nindent 12 }}
          ports:
            - name: dtmf
              containerPort: {{ .Values.sbcInbound.ports.dtmf }}
              protocol: UDP
            - name: health
              containerPort: {{ .Values.health.port }}
              protocol: TCP
            - name: drachtio
              containerPort: {{ .Values.sbcInbound.ports.tcp }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: {{ .Values.health.port }}
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10 
          startupProbe:
            httpGet:
              path: /health/startup
              port: {{ .Values.health.port }}
          env:
            - name: NODE_ENV
              value: {{ .Values.global.nodeEnv | quote }}
            - name: K8S 
              value: {{ .Values.global.k8s | quote }}
          {{- if .Values.sbcInbound.featureServerSignalingTransportTcp }}
            - name: K8S_FEATURE_SERVER_TRANSPORT
              value: "tcp"
          {{- end }}
            - name: K8S_FEATURE_SERVER_SERVICE_NAME 
              {{- if .Values.featureServer.useStatefulSet }}
              value: {{ .Values.featureServer.headlessServiceName | quote }}
              {{- else}}
              value: {{ .Values.featureServer.serviceName | quote }}
              {{- end }}
            - name: K8S_RTPENGINE_SERVICE_NAME 
              {{- if .Values.sbc.rtp.useStatefulSet }}
              value: {{ printf "%s:%.0f" .Values.sbc.rtp.headlessServiceName .Values.sbc.rtp.port }}
              {{- else }}
              value: {{ printf "%s:%.0f" .Values.sbc.rtp.serviceName .Values.sbc.rtp.port }}
              {{- end }}
            - name: DTMF_LISTEN_PORT
              value: {{ .Values.sbcInbound.ports.dtmf | quote }}
            - name: JAMBONES_LOGLEVEL
              value: {{ .Values.sbcInbound.logLevel }}
            - name: JAMBONES_TRACK_ACCOUNT_CALLS
              value: {{ .Values.global.track.accountCalls | quote }}
            - name: JAMBONES_TRACK_APP_CALLS
              value: {{ .Values.global.track.applicationCalls | quote }}
            - name: JAMBONES_TRACK_SP_CALLS
              value: {{ .Values.global.track.serviceProviderCalls | quote }}
            - name: ENABLE_METRICS
              value: {{ if .Values.stats.enabled }}{{ print 1 | quote }}{{ else }}{{ print 0 | quote }}{{ end }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: voicegateway-jwt
                  key: jwt
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STATS_TAGS
              value: "pod:$(K8S_POD_NAME)"
            - name: STATS_PROTOCOL
              value: {{ .Values.stats.protocol }}
            - name: STATS_TELEGRAF
              value: {{ if .Values.stats.telegraf }}{{ print 1 | quote }}{{ else }}{{ print 0 | quote }}{{ end }}
            - name: STATS_HOST
              value: {{ .Values.telegraf.serviceName }}
            - name: STATS_PORT
              value: {{ .Values.telegraf.port | quote }}
            - name: STATS_SAMPLE_RATE
              value:  {{ .Values.stats.sampleRate | quote }}
            - name: DRACHTIO_PORT
              value: {{ .Values.sbcInbound.ports.tcp | quote }}
            - name: DRACHTIO_SECRET
              valueFrom:
                secretKeyRef:
                  name: voicegateway-drachtio-secret
                  key: secret
            - name: JAMBONES_MYSQL_HOST
              value: {{ .Values.mysql.host }}
            - name: JAMBONES_MYSQL_DATABASE
              value: {{ .Values.mysql.database.name | quote }}
            - name: JAMBONES_MYSQL_USER
              value: {{ .Values.mysql.auth.username | quote }}
            - name: JAMBONES_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voicegateway-mysql-password
                  key: mysql-password
            - name: JAMBONES_REDIS_HOST
              value: {{ .Values.redis.host }}
            - name: JAMBONES_REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: JAMBONES_TIME_SERIES_HOST
              value: {{ .Values.influxdb.host }}
            - name: TRACING_ENABLED
              value: {{ .Values.tracing.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ .Values.tracing.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ .Values.tracing.errorsEnabled | quote }}
            - name: TRACING_SAMPLE_RATE
              value: {{ .Values.tracing.sampleRate | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ .Values.tracing.eventsSampleRate | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.tracing.environment | quote }}
            - name: COGNIGY_AI_VERSION
              value: {{ .Chart.Version | trunc 6 | quote }}
            - name: PRIVATE_VOIP_NETWORK_CIDR
              value: {{ .Values.global.privateVoipNetworkCidr | quote }}
            {{- if .Values.sbcInbound.extraEnvVars }}
            {{- include "vg.common.tplvalues.render" (dict "value" .Values.sbcInbound.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: cognigy-env
