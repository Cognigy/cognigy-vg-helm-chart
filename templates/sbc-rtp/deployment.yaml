apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: sbc-rtp
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    app: sbc-rtp
  annotations:
    "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
spec:
  selector:
    matchLabels:
      app: sbc-rtp
  template:
    metadata:
      labels:
        app: sbc-rtp
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
    spec:
    {{- include "image.pullSecrets" $ | nindent 6 }}
      nodeSelector:
        {{ .Values.sbc.rtp.nodeSelector.label }}: {{.Values.sbc.rtp.nodeSelector.value | quote }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      tolerations:
        - key: {{ .Values.sbc.rtp.toleration | quote }}
          operator: "Exists"
          effect: "NoSchedule"
      restartPolicy: Always
      initContainers:
        {{- if and (.Values.sbc.ec2EipAllocator.enabled) (eq .Values.cloud "aws") }}
        - image: {{ .Values.sbc.ec2EipAllocator.image }}
          name: ec2-eip-allocator
          env:
            - name: AWS_EIP_NODE_GROUP_ROLE
              value: {{ .Values.sbc.ec2EipAllocator.rtpEipGroupRole }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: awsKeyId
                  name: {{ .Values.sbc.ec2EipAllocator.vgOperatorUser }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: awsSecretKey
                  name: {{ .Values.sbc.ec2EipAllocator.vgOperatorUser }}
        {{- end }}
        - image: kanisterio/mysql-sidecar:0.40.0
          name: db-create-wait
          env:            
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voicegateway-mysql-password
                  key: mysql-password
          command:
            - sh 
            - -c 
            - |
              until mysql -u {{ .Values.mysql.auth.username }} -D {{ .Values.mysql.database.name }} -h mysql -p${PASSWORD} --protocol=tcp -e "select count(*) from accounts";
              do 
                sleep 5
              done
      containers:
        - name: rtp-engine-sidecar
          image: {{ .Values.rtpEngineSidecar.image }}
          imagePullPolicy:  {{ .Values.rtpEngineSidecar.imagePullPolicy }}
          resources: {{- toYaml .Values.rtpEngineSidecar.resources | nindent 12 }}
          ports:
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
          env:
            - name: K8S 
              value: {{ .Values.global.k8s | quote }}
            - name: NODE_ENV
              value: {{ .Values.global.nodeEnv | quote }}
            - name: JAMBONES_LOGLEVEL
              value: {{ .Values.rtpEngineSidecar.logLevel }}
            - name: JAMBONES_REDIS_HOST
              value: {{ .Values.redis.host }}
            - name: JAMBONES_REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: RTPENGINE_DTMF_LOG_PORT
              value: {{ .Values.rtpEngineSidecar.ports.dtmf | quote }}
            - name: ENABLE_METRICS
              value: {{ if .Values.stats.enabled }}{{ print 1 | quote }}{{ else }}{{ print 0 | quote }}{{ end }}
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: STATS_TAGS
              value: "pod:$(K8S_POD_NAME)"
            - name: STATS_PROTOCOL
              value: {{ .Values.stats.protocol }}
            - name: STATS_TELEGRAF
              value: {{ if .Values.stats.telegraf }}{{ print 1 | quote }}{{ else }}{{ print 0 | quote }}{{ end }}
            - name: STATS_HOST
              value: {{ .Values.telegraf.serviceName }}
            - name: STATS_PORT
              value: {{ .Values.telegraf.port | quote }}
            - name: STATS_SAMPLE_RATE
              value:  {{ .Values.stats.sampleRate | quote }}
            - name: TRACING_ENABLED
              value: {{ .Values.tracing.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ .Values.tracing.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ .Values.tracing.errorsEnabled | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ .Values.tracing.eventsSampleRate | quote }}
            - name: COGNIGY_AI_VERSION
              value: {{ .Values.global.cognigyVgVersion | quote }}
          envFrom:
            - configMapRef:
                name: cognigy-env
        - name: rtp-engine 
          image: {{ .Values.rtpEngine.image }}
          imagePullPolicy: {{ .Values.rtpEngine.imagePullPolicy }}
          resources: {{- toYaml .Values.rtpEngine.resources | nindent 12 }}
          ports:
            - name: rtp-engine
              containerPort: {{ .Values.rtpEngine.port }}
              protocol: TCP            
          args: 
            - rtpengine
            - --listen-udp=22222
            - --listen-http=22222
            - --homer
            - {{ .Values.heplifyServer.serviceName }}:{{ .Values.heplifyServer.ports.udp }}
            - --homer-protocol
            - udp
            - --homer-id
            - {{ .Values.rtpEngine.homerId | quote }}
            - --log-level
            - {{ .Values.rtpEngine.logLevel | quote }}
          env:
            - name: NODE_ENV
              value: {{ .Values.global.nodeEnv | quote }}
            - name: CLOUD 
              value: {{ .Values.cloud | quote }}
            {{- if eq .Values.cloud "aws" }}
            - name: IMDSv2
              value: {{ .Values.aws.useIMDSv2 | quote }}
            {{- end }}
            {{- if and (eq .Values.cloud "azure") (.Values.azure.useLoadBalancerIMDS) }}
            - name: LB_IMDS
              value: {{ .Values.azure.useLoadBalancerIMDS | quote }}
            {{- end }}
            - name: DRACHTIO_SECRET
              valueFrom:
                secretKeyRef:
                  name: voicegateway-drachtio-secret
                  key: secret
          envFrom:
            - configMapRef:
                name: cognigy-env
