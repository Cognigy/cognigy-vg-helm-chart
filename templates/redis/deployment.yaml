{{- if not .Values.redisHa.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    app: redis
    owner-team: echo
spec:
  serviceName: redis
  replicas: {{ .Values.redis.replicaCount }}
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      name: redis
      labels:
        app: redis
    spec:
      {{- include "image.pullSecrets" $ | nindent 6 }}
      {{- if .Values.redis.affinity }}
      affinity: {{- include "vg.common.tplvalues.render" (dict "value" .Values.redis.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.redis.nodeSelector }}
      nodeSelector: {{- include "vg.common.tplvalues.render" (dict "value" .Values.redis.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.redis.priorityClassName }}
      priorityClassName: {{ .Values.redis.priorityClassName }}
      {{- end }}
      {{- if .Values.redis.podSecurityContext }}
      securityContext: {{- include "vg.common.tplvalues.render" (dict "value" .Values.redis.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.redis.tolerations }}
      tolerations: {{- include "vg.common.tplvalues.render" (dict "value" .Values.redis.tolerations "context" $) | nindent 8 }}
      {{- end }}
      restartPolicy: Always
      containers:
        - name: redis
          image: {{ include "vg.common.image.render" (dict "global" $.Values.global "image" .Values.redis.image) }}
          imagePullPolicy: {{ .Values.redis.imagePullPolicy }}
          resources: {}
          ports:
            - name: redis
              containerPort: {{ .Values.redis.port }}
              protocol: TCP
{{- end }}
