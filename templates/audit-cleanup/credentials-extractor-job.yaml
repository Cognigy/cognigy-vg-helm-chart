{{- if and (.Values.auditLogging.enabled) (not (lookup "v1" "Secret" $.Release.Namespace "vg-api-admin-creds")) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: audit-cleanup-admin-credentials
  namespace: {{ $.Release.Namespace | quote }}
  labels:
    app: audit-cleanup
    component: extractor
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 5
  ttlSecondsAfterFinished: {{ .Values.auditLogging.cleanup.ttlSecondsAfterFinished | default 180 }}
  template:
    metadata:
      labels:
        app: audit-cleanup-admin-extractor
    spec:
      {{- include "image.pullSecrets" $ | nindent 6 }}
      restartPolicy: Never
      serviceAccountName: audit-cleanup-admin-extractor
      containers:
      - name: admin-credentials-extractor
        image: {{ include "vg.common.image.render" (dict "global" $.Values.global "image" .Values.jobs.image) }}
        imagePullPolicy: IfNotPresent
        env:
          - name: NAMESPACE
            value: {{ $.Release.Namespace | quote }}
          - name: SECRET_NAME
            value: "vg-api-admin-creds"
          - name: MAX_RETRIES
            value: {{ .Values.auditLogging.cleanup.extractorMaxRetries | default "2" | quote }}
          - name: RETRY_INTERVAL
            value: {{ .Values.auditLogging.cleanup.extractorRetryInterval | default "20" | quote }}
        command:
          - /bin/bash
          - -c
          - |
            echo "üöÄ Starting admin credentials extraction..."
            echo "Namespace: $NAMESPACE"
            echo "Secret name: $SECRET_NAME"
            echo "Max retries: $MAX_RETRIES"
            echo "Retry interval: ${RETRY_INTERVAL}s"
            
            # Wait for API server to be ready
            echo "‚è≥ Waiting for API server to be ready..."
            if ! kubectl wait --for=condition=ready pod -l app=api-server -n $NAMESPACE --timeout=600s; then
              echo "‚ùå API server pods not ready within timeout"
              exit 1
            fi
            
            # Get all API server pods
            echo "üìã Finding API server pods..."
            API_PODS=($(kubectl get pods -l app=api-server -n $NAMESPACE -o jsonpath="{.items[*].metadata.name}"))
            if [ ${#API_PODS[@]} -eq 0 ]; then
              echo "‚ùå No API server pods found"
              exit 1
            fi
            echo "üìã Found ${#API_PODS[@]} API server pod(s): ${API_PODS[*]}"
            
            # Try to extract password from each API server pod
            COGNIGY_PASSWORD=""
            FOUND_VALID_LOGS=false
            
            echo "üîç Searching for cognigy-ai password across all API server pods..."
            
            for pod in "${API_PODS[@]}"; do
              echo "üîç Checking pod: $pod"
              
              # Check if this pod has the [USER] 'cognigy-ai' log entry
              if ! kubectl logs "$pod" -n $NAMESPACE 2>/dev/null | grep -q -E "\[USER\].*'cognigy-ai'"; then
                echo "‚è≠Ô∏è Pod $pod does not contain cognigy-ai setup logs"
                continue
              fi
              
              echo "‚úÖ Found cognigy-ai logs in pod: $pod"
              
              # Check if the user already exists (logs are too old)
              if kubectl logs "$pod" -n $NAMESPACE 2>/dev/null | grep -q -E "\[USER\].*'cognigy-ai'.*already exists"; then
                echo "‚ö†Ô∏è  Pod $pod: cognigy-ai user already exists - logs are too old, password no longer available"
                continue
              fi
              
              # Try to extract password from this pod
              RETRY_COUNT=0
              FOUND_PASSWORD_IN_POD=false
              
              while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$FOUND_PASSWORD_IN_POD" = false ]; do
                echo "üîç Attempt $((RETRY_COUNT + 1))/$MAX_RETRIES to extract cognigy-ai password from pod $pod..."
                
                # Look for the specific pattern: [USER] 'cognigy-ai' <password>
                TEMP_PASSWORD=$(kubectl logs $pod -n $NAMESPACE | grep -E "\[USER\].*'cognigy-ai'.*password:" | sed -n "s/.*'cognigy-ai' password: *\([^ ]*\).*/\1/p" | tail -1)
                
                if [ -n "$TEMP_PASSWORD" ]; then
                  COGNIGY_PASSWORD="$TEMP_PASSWORD"
                  FOUND_PASSWORD_IN_POD=true
                  FOUND_VALID_LOGS=true
                  echo "‚úÖ Found cognigy-ai password in pod $pod: ${COGNIGY_PASSWORD:0:4}***"
                  break
                else
                  echo "üîÑ Password not found yet in pod $pod, waiting ${RETRY_INTERVAL} seconds..."
                  echo "üìã Searching in logs for patterns in pod $pod..."
                  echo "üîç Lines containing '[USER]' and 'cognigy-ai':"
                  kubectl logs $pod -n $NAMESPACE | grep -E "\[USER\].*'cognigy-ai'" | head -3
                  sleep $RETRY_INTERVAL
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                fi
              done
              
              # If we found a password, break out of the pod loop
              if [ "$FOUND_PASSWORD_IN_POD" = true ]; then
                break
              else
                echo "‚ö†Ô∏è  Could not extract password from pod $pod after $MAX_RETRIES attempts"
              fi
            done
            
            if [ -z "$COGNIGY_PASSWORD" ]; then
              echo "‚ö†Ô∏è  Could not extract cognigy-ai password from any API server pod"
              if [ "$FOUND_VALID_LOGS" = false ]; then
                echo "üìã All pods either had no cognigy-ai logs or contained 'already exists' messages (logs too old)"
              else
                echo "üìã Found cognigy-ai setup logs but could not extract password after retries"
              fi
              echo "üîß Using placeholder password for long-running API servers"
              COGNIGY_PASSWORD="password"
            fi
            
            # Create or update the secret with username and password
            echo "üîê Creating/updating admin credentials secret..."
            
            kubectl create secret generic "$SECRET_NAME" \
              -n "$NAMESPACE" \
              --from-literal=username='cognigy-ai' \
              --from-literal=password="$COGNIGY_PASSWORD" \
              --dry-run=client -o yaml \
            | kubectl apply -f -
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Admin credentials secret '$SECRET_NAME' created/updated successfully"
              echo "üîê Secret contains:"
              echo "  - username: cognigy-ai"
              if [ "$COGNIGY_PASSWORD" = "password" ]; then
                echo "  - password: [PLACEHOLDER - logs were too old]"
                echo "‚ö†Ô∏è  Note: Using placeholder password 'password' due to missing logs"
              else
                echo "  - password: [REDACTED]"
              fi
              echo "üéâ Credentials extraction completed successfully!"
            else
              echo "‚ùå Failed to create/update secret"
              exit 1
            fi
        resources:
          requests:
            cpu: "50m"
            memory: "64Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
{{- end }}