apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-server
  namespace: {{ $.Release.Namespace | quote }}
spec:
  selector:
    matchLabels:
      app: api-server
  {{- if not (and ($.Values.hpa.enabled) ($.Values.hpa.removeReplicas)) }}
  replicas: {{ .Values.api.replicaCount }}
  {{- end }}
  template:
    metadata:
      labels:
        app: api-server
      annotations:
        checksum/cognigy-env: {{ include (print $.Template.BasePath "/configurations/cognigy-env.yaml") $ | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/common-secrets/vg-homer-password.yaml") $ | sha256sum }}
    spec:
      {{- include "image.pullSecrets" $ | nindent 6 }}
      {{- if .Values.api.affinity }}
      affinity: {{- include "vg.common.tplvalues.render" (dict "value" .Values.api.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.Values.api.nodeSelector) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector))}}
      nodeSelector:
        {{- if .Values.api.nodeSelector }}
          {{- include "vg.common.tplvalues.render" (dict "value" .Values.api.nodeSelector "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaNodeSelector) }}
          {{- include "vg.common.tplvalues.render" (dict "value" $.Values.hpa.hpaNodeSelector "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      {{- if .Values.api.priorityClassName }}
      priorityClassName: {{ .Values.api.priorityClassName }}
      {{- end }}
      {{- if .Values.api.podSecurityContext }}
      securityContext: {{- include "vg.common.tplvalues.render" (dict "value" .Values.api.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      {{- if or (.Values.api.tolerations) (and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations))}}
      tolerations: 
        {{- if or (.Values.api.tolerations) }}
          {{- include "vg.common.tplvalues.render" (dict "value" .Values.api.tolerations "context" $) | nindent 8 }}
        {{- end }}
        {{- if and ($.Values.hpa.enabled) ($.Values.hpa.useHpaTolerations) }}
          {{- include "vg.common.tplvalues.render" (dict "value" $.Values.hpa.hpaTolerations "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      restartPolicy: Always
      initContainers:
        - image: kanisterio/mysql-sidecar:0.40.0
          name: db-create-wait
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voicegateway-mysql-password
                  key: mysql-password
          command:
            - sh 
            - -c 
            - |
              until mysql -u {{ .Values.mysql.auth.username }} -D {{ .Values.mysql.database.name }} -h {{ .Values.mysql.host }} -p${PASSWORD} --protocol=tcp -e "select count(*) from accounts";
              do 
                sleep 5
              done
      containers:
        - name: api-server
          image: {{ include "vg.common.image.render" (dict "global" $.Values.global "image" .Values.api.image) }}
          imagePullPolicy: {{ .Values.api.imagePullPolicy }}
          resources: {{- toYaml .Values.api.resources | nindent 12 }}
          ports:
            - name: api-server
              containerPort: {{ .Values.api.port }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            - name: health
              containerPort: {{ .Values.health.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/liveness
              port: {{ .Values.health.port }}
            failureThreshold: 3
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 10 
          startupProbe:
            httpGet:
              path: /health/startup
              port: {{ .Values.health.port }}
          env:
            - name: NODE_ENV
              value: {{ .Values.global.nodeEnv | quote }}
            - name: HTTP_PORT
              value: {{ .Values.api.port | quote }}
            - name: K8S
              value: {{ .Values.global.k8s | quote }}
            - name: K8S_FEATURE_SERVER_SERVICE_NAME 
              {{- if .Values.featureServer.useStatefulSet }}
              value: {{ .Values.featureServer.headlessServiceName | quote }}
              {{- else }}
              value: {{ .Values.featureServer.serviceName | quote }}
              {{- end }}
            - name: HOMER_BASE_URL
              value: {{ .Values.homer.urlPrefixServiceConnection }}{{ .Values.homer.serviceName }}
            - name: HOMER_USERNAME
              value: {{ .Values.homer.auth.username | quote }}
            - name: HOMER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: vg-homer-password
                  key: homer-password
            - name: JAEGER_BASE_URL
              value: {{ .Values.jaeger.urlPrefixServiceConnection }}{{ .Values.jaeger.serviceName }}:{{ .Values.jaeger.ports.tcp }}
            - name: JAMBONES_AUTH_USE_JWT
              value: {{ .Values.api.jwtAuth | quote }}
            - name: JAMBONES_LOGLEVEL
              value: {{ if .Values.api.logLevel }}{{ .Values.api.logLevel | quote }}{{ else }}{{ .Values.global.logLevel | quote }}{{ end }}
            - name: JAMBONES_MYSQL_HOST
              value: {{ .Values.mysql.host }}
            - name: JAMBONES_MYSQL_DATABASE
              value: {{ .Values.mysql.database.name | quote }}
            - name: JAMBONES_MYSQL_USER
              value: {{ .Values.mysql.auth.username | quote }}
            - name: JAMBONES_MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voicegateway-mysql-password
                  key: mysql-password
            - name: JAMBONES_REDIS_HOST
              value: {{ .Values.redis.host }}
            - name: JAMBONES_REDIS_PORT
              value: {{ .Values.redis.port | quote }}
            - name: JAMBONES_TIME_SERIES_HOST
              value: {{ .Values.influxdb.host }}
            - name: JAMBONES_TRUST_PROXY
              value: "2"
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: voicegateway-jwt
                  key: jwt
            - name: TRACING_ENABLED
              value: {{ .Values.tracing.enabled | quote }}
            - name: TRACING_BASE_URL_WITH_PROTOCOL
              value: {{ .Values.tracing.baseUrl | quote }}      
            - name: TRACING_ERRORS_ENABLED
              value: {{ .Values.tracing.errorsEnabled | quote }}
            - name: TRACING_SAMPLE_RATE
              value: {{ .Values.tracing.sampleRate | quote }}
            - name: TRACING_EVENTS_SAMPLE_RATE
              value: {{ .Values.tracing.eventsSampleRate | quote }}
            - name: ENVIRONMENT
              value: {{ .Values.tracing.environment | quote }}
            - name: COGNIGY_AI_VERSION
              value: {{ regexFind "^[0-9]+\\.[0-9]+\\.[0-9]+" .Chart.Version | quote }}
            - name: ENABLE_DEBOUNCE_MIDDLEWARE
              value: {{ .Values.api.enableDebounceMiddleware | quote }}
            - name: DEBOUNCE_TIME_IN_SECONDS
              value: {{ .Values.api.debounceTimeInSeconds | quote }}
            - name: DEBOUNCE_QUANTITY
              value: {{ .Values.api.debounceQuantity | quote }}
            - name: DISABLE_RATE_LIMIT
              value: {{ .Values.api.disableRateLimit | quote }}
            - name: RATE_LIMIT_WINDOWS_MINS
              value: {{ .Values.api.rateLimitMinutes | quote }}
            - name: RATE_LIMIT_MAX_PER_WINDOW
              value: {{ .Values.api.rateLimit | quote }}              
            - name: JAMBONZ_RECORD_WS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: voicegateway-call-recording-credentials
                  key: username
            - name: JAMBONZ_RECORD_WS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: voicegateway-call-recording-credentials
                  key: password
            {{- if .Values.cognigyLogin.enabled }}
            - name: VG_API_BASE_URL
              value: {{ printf "%s://%s" .Values.api.protocol .Values.ingress.api.host | quote }}
            - name: VG_WEBAPP_BASE_URL
              value: {{ printf "%s://%s" .Values.api.protocol .Values.ingress.webapp.host | quote }}
            - name: COGNIGY_API_BASE_URL
              value: {{ .Values.cognigyLogin.baseUrl | quote }}
            - name: COGNIGY_OAUTH_CLIENT_ID
              value: {{ .Values.cognigyLogin.clientId | quote }}
            - name: COGNIGY_OAUTH_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.cognigyLogin.secret | quote }}
                  key: {{ .Values.cognigyLogin.secretKey | quote }}
            {{- end }}
            - name: VG_SENTRY_TRACING_ENABLED
              value: {{ .Values.tracing.callTracingEnabled | quote }}
            {{- if .Values.tracing.callTracingEnabled }}
            - name: VG_SENTRY_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.tracing.secret | quote }}
                  key: {{ .Values.tracing.secretKey | quote }}
            - name: VG_SENTRY_API_PROJECT
              value: {{ .Values.tracing.apiProject | quote }}
            - name: VG_SENTRY_API_BASE_URL
              value: {{ .Values.tracing.apiBaseUrl | quote }}
            {{- end }}
            - name: ENABLE_PREPARE_COGNIGY_DATA
              value: {{ .Values.api.enablePrepareCognigyData | quote }}
            - name: JAMBONES_DISABLE_TTS_STREAMING
              value: {{ not .Values.global.enableTtsStreaming | quote }}
            {{- if .Values.api.extraEnvVars }}
            {{- include "vg.common.tplvalues.render" (dict "value" .Values.api.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: cognigy-env